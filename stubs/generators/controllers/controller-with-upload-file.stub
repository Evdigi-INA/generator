<?php

{{namespace}}
use {{modelPath}};
use {{requestPath}};
use Illuminate\Contracts\View\View;
use Yajra\DataTables\Facades\DataTables;
use App\Generators\Services\ImageServiceV2;
use Illuminate\Http\{JsonResponse, RedirectResponse};
use Illuminate\Routing\Controllers\{HasMiddleware, Middleware};{{useExportNamespace}}

class {{modelNameSingularPascalCase}}Controller extends Controller implements HasMiddleware
{
    public function __construct(public ImageServiceV2 $imageServiceV2, {{uploadPaths}}public string $disk = '{{disk}}')
    {
        //
    }

    /**
     * Get the middleware that should be assigned to the controller.
     */
    public static function middleware(): array
    {
        return [
            // {{middlewareName}}

            // TODO: uncomment this code below if you are using spatie permission
            // new Middleware(middleware: 'permission:{{modelNameSpaceLowercase}} view', only: ['index', 'show']),
            // new Middleware(middleware: 'permission:{{modelNameSpaceLowercase}} create', only: ['create', 'store']),
            // new Middleware(middleware: 'permission:{{modelNameSpaceLowercase}} edit', only: ['edit', 'update']),
            // new Middleware(middleware: 'permission:{{modelNameSpaceLowercase}} delete', only: ['destroy']),
        ];
    }

    /**
     * Display a listing of the resource.
     */
    public function index(): View|JsonResponse
    {
        if (request()->ajax()) {
            ${{modelNamePluralCamelCase}} = {{query}};

            return Datatables::of(source: ${{modelNamePluralCamelCase}})
                {{addColumns}}
                ->addColumn(name: 'action', content: '{{viewPath}}{{modelNamePluralKebabCase}}.include.action')
                ->toJson();
        }

        return view(view: '{{viewPath}}{{modelNamePluralKebabCase}}.index');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        return view(view: '{{viewPath}}{{modelNamePluralKebabCase}}.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{modelNameSingularPascalCase}}Request $request): RedirectResponse
    {
        $validated = $request->validated();
        {{passwordFieldStore}}{{inputMonths}}
{{storeCode}}
        {{modelNameSingularPascalCase}}::create($validated);

        return to_route(route: '{{modelNamePluralKebabCase}}.index')->with(key: 'success', value: __(key: 'The {{modelNameCleanSingular}} was created successfully.'));
    }

    /**
     * Display the specified resource.
     */
    public function show({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): View
    {
        {{loadRelation}}return view(view: '{{viewPath}}{{modelNamePluralKebabCase}}.show', data: compact(var_name: '{{modelNameSingularCamelCase}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): View
    {
        {{loadRelation}}return view(view: '{{viewPath}}{{modelNamePluralKebabCase}}.edit', data: compact(var_name: '{{modelNameSingularCamelCase}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{modelNameSingularPascalCase}}Request $request, {{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): RedirectResponse
    {
        $validated = $request->validated();
        {{passwordFieldUpdate}}{{inputMonths}}
{{updateCode}}
        {{updateDataAction}}

        return to_route(route: '{{modelNamePluralKebabCase}}.index')->with(key: 'success', value: __(key: 'The {{modelNameCleanSingular}} was updated successfully.'));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): RedirectResponse
    {
        try {
            {{assignImageDelete}}
            ${{modelNameSingularCamelCase}}->delete();

            {{deleteImageCodes}}
            return to_route(route: '{{modelNamePluralKebabCase}}.index')->with(key: 'success', value: __(key: 'The {{modelNameCleanSingular}} was deleted successfully.'));
        } catch (\Exception $e) {
            return to_route(route: '{{modelNamePluralKebabCase}}.index')->with(key: 'error', value: __(key: "The {{modelNameCleanSingular}} can't be deleted because it's related to another table."));
        }
    }
    
    {{exportFunction}}
}
