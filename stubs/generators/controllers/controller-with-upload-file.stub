<?php

{{namespace}}
use {{modelPath}};
use {{requestPath}};
use Yajra\DataTables\Facades\DataTables;
use App\Services\ImageService;
use Illuminate\Contracts\View\View;
use Illuminate\Http\{JsonResponse, RedirectResponse};

class {{modelNameSingularPascalCase}}Controller extends Controller
{
    public function __construct(public ImageService $imageService{{uploadPaths}})
    {
        {{assignUploadPaths}}
        // TODO: uncomment this code if you are using spatie permission
        // $this->middleware('permission:{{modelNameSpaceLowercase}} view')->only('index', 'show');
        // $this->middleware('permission:{{modelNameSpaceLowercase}} create')->only('create', 'store');
        // $this->middleware('permission:{{modelNameSpaceLowercase}} edit')->only('edit', 'update');
        // $this->middleware('permission:{{modelNameSpaceLowercase}} delete')->only('destroy');
    }

    /**
     * Display a listing of the resource.
     */
    public function index(): View|JsonResponse
    {
        if (request()->ajax()) {
            ${{modelNamePluralCamelCase}} = {{query}};

            return Datatables::of(${{modelNamePluralCamelCase}})
                {{addColumns}}
{{indexCode}}
                ->addColumn('action', '{{viewPath}}{{modelNamePluralKebabCase}}.include.action')
                ->toJson();
        }

        return view('{{viewPath}}{{modelNamePluralKebabCase}}.index');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        return view('{{viewPath}}{{modelNamePluralKebabCase}}.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{modelNameSingularPascalCase}}Request $request): RedirectResponse
    {
        $validated = $request->validated();
        {{passwordFieldStore}}{{inputMonths}}
{{storeCode}}
        {{modelNameSingularPascalCase}}::create($validated);

        return to_route('{{modelNamePluralKebabCase}}.index')->with('success', __('The {{modelNameSingularCamelCase}} was created successfully.'));
    }

    /**
     * Display the specified resource.
     */
    public function show({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): View
    {
        {{loadRelation}}return view('{{viewPath}}{{modelNamePluralKebabCase}}.show', compact('{{modelNameSingularCamelCase}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): View
    {
        {{loadRelation}}return view('{{viewPath}}{{modelNamePluralKebabCase}}.edit', compact('{{modelNameSingularCamelCase}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{modelNameSingularPascalCase}}Request $request, {{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): RedirectResponse
    {
        $validated = $request->validated();
        {{passwordFieldUpdate}}{{inputMonths}}
{{updateCode}}
        {{updateDataAction}}

        return to_route('{{modelNamePluralKebabCase}}.index')->with('success', __('The {{modelNameSingularCamelCase}} was updated successfully.'));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): RedirectResponse
    {
        try {
            {{assignImageDelete}}
            ${{modelNameSingularCamelCase}}->delete();

            {{deleteImageCodes}}
            return to_route('{{modelNamePluralKebabCase}}.index')->with('success', __('The {{modelNameSingularCamelCase}} was deleted successfully.'));
        } catch (\Throwable $th) {
            return to_route('{{modelNamePluralKebabCase}}.index')->with('error', __("The {{modelNameSingularCamelCase}} can't be deleted because it's related to another table."));
        }
    }
}
