<?php

{{namespace}}
use {{modelPath}};
use {{requestPath}};
use Illuminate\Contracts\View\View;
use Yajra\DataTables\Facades\DataTables;
use Illuminate\Http\{JsonResponse, RedirectResponse};
use Illuminate\Routing\Controllers\{HasMiddleware, Middleware};

class {{modelNameSingularPascalCase}}Controller extends Controller implements HasMiddleware
{
    /**
     * Get the middleware that should be assigned to the controller.
     */
    public static function middleware(): array
    {
        return [
            // '{{middlewareName}}',

            // TODO: uncomment this code if you are using spatie permission
            // new Middleware('permission:{{modelNameSpaceLowercase}} view', only: ['index', 'show']),
            // new Middleware('permission:{{modelNameSpaceLowercase}} create', only: ['create', 'store']),
            // new Middleware('permission:{{modelNameSpaceLowercase}} edit', only: ['edit', 'update']),
            // new Middleware('permission:{{modelNameSpaceLowercase}} delete', only: ['destroy']),
        ];
    }

    /**
     * Display a listing of the resource.
     */
    public function index(): View|JsonResponse
    {
        if (request()->ajax()) {
            ${{modelNamePluralCamelCase}} = {{query}};

            return DataTables::of(${{modelNamePluralCamelCase}})
                {{addColumns}}->addColumn('action', '{{viewPath}}{{modelNamePluralKebabCase}}.include.action')
                ->toJson();
        }

        return view('{{viewPath}}{{modelNamePluralKebabCase}}.index');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        return view('{{viewPath}}{{modelNamePluralKebabCase}}.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{modelNameSingularPascalCase}}Request $request): RedirectResponse
    {
        {{passwordFieldStore}}{{inputMonths}}
        {{insertDataAction}}

        return to_route('{{modelNamePluralKebabCase}}.index')->with('success', __('The {{modelNameCleanSingular}} was created successfully.'));
    }

    /**
     * Display the specified resource.
     */
    public function show({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): View
    {
        {{loadRelation}}return view('{{viewPath}}{{modelNamePluralKebabCase}}.show', compact('{{modelNameSingularCamelCase}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): View
    {
        {{loadRelation}}return view('{{viewPath}}{{modelNamePluralKebabCase}}.edit', compact('{{modelNameSingularCamelCase}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{modelNameSingularPascalCase}}Request $request, {{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): RedirectResponse
    {
        {{passwordFieldUpdate}}{{inputMonths}}
        {{updateDataAction}}

        return to_route('{{modelNamePluralKebabCase}}.index')->with('success', __('The {{modelNameCleanSingular}} was updated successfully.'));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelNameSingularPascalCase}} ${{modelNameSingularCamelCase}}): RedirectResponse
    {
        try {
            ${{modelNameSingularCamelCase}}->delete();

            return to_route('{{modelNamePluralKebabCase}}.index')->with('success', __('The {{modelNameCleanSingular}} was deleted successfully.'));
        } catch (\Throwable $th) {
            return to_route('{{modelNamePluralKebabCase}}.index')->with('error', __("The {{modelNameCleanSingular}} can't be deleted because it's related to another table."));
        }
    }
}
